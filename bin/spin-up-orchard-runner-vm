#! /bin/bash

set -x
set -euo pipefail

env="$HOME/.orchard-runner${RUNNER_ENV:+-$RUNNER_ENV}.env"
if test -f "$env"; then
    . "$env"
fi

hostname=${RUNNER_HOSTNAME:-"$(hostname)"}
pat="${RUNNER_CFG_PAT:-}"
token="${RUNNER_CFG_TOKEN:-}"
variant="${ORCHARD_MACOS_VARIANT:-ventura-xcode:14.3}"
labels="${RUNNER_LABELS:+$RUNNER_LABELS,}hosted-on-$hostname"
runners_per_repo="${RUNNERS_PER_REPO:-4}"
custom_actions_runner_package_url="${RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE_URL:-}"

repos=("$@")

base_image="${ORCHARD_MACOS_BASE_IMAGE:-ghcr.io/cirruslabs/macos-$variant}"
variant_name=$(echo "$variant" | tr ':' '-')
base_name="$variant_name-${ORCHARD_VM_STAMP:-$(date +%Y%m%d-%H%M%S)}"
clone="gh-runner-$base_name"

startup_script=$(mktemp /tmp/startup-script.XXXXXX)

spawn_log="spawn-runners-in-orchard-vm.log"
end_marker=$(uuidgen)

cat >"$startup_script" <<-EOF
#! /bin/bash

set -x
set -euo pipefail

git clone https://github.com/grigorye/Orchard-GH-Runners r

if [ "${RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE_URL:-}" != "" ]; then
    rm -r actions-runner
    mkdir actions-runner
    curl -o custom-actions-runner.tar.gz -L -H 'Authorization: Bearer $RUNNER_AUTH_BEARER' "$RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE_URL"
    tar xzf custom-actions-runner.tar.gz -C actions-runner
fi

env \\
    RUNNERS_PER_REPO="$runners_per_repo" \\
    RUNNER_LABELS="$labels" \\
    REPOS="${repos[*]}" \\
    RUNNER_GH_DOMAIN="${RUNNER_GH_DOMAIN:-}" \\
    RUNNER_GIT_CREDENTIALS="${RUNNER_GIT_CREDENTIALS:-}" \\
    RUNNER_BASE_NAME="$base_name" \\
    RUNNER_CFG_PAT="${pat:-}" \\
    RUNNER_TOKEN="${token:-}" \\
    RUNNER_HOSTNAME="$hostname" \\
    SPAWN_END_MARKER="$end_marker" \\
    ./r/helpers/spawn-runners-in-orchard-vm \\
    2>&1 | tee "$spawn_log"
EOF

cat "$startup_script"

orchard create vm \
    --restart-policy OnFailure \
    --image "$base_image" \
    --startup-script "@$startup_script" \
    "$clone"

while ! orchard ssh vm "$clone" "test -f $spawn_log"; do
    sleep 1
done

(
    echo $$
    orchard ssh vm "$clone" "tail -f $spawn_log"
) |
    (
        read -r pid
        awk "/$end_marker/ { exit } { print }"
        kill "$pid"
    )
