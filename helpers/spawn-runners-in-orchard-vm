#! /bin/bash

set -x
set -euo pipefail

labels="$RUNNER_LABELS"
gh_domain="${RUNNER_GH_DOMAIN:-github.com}"
repos=($REPOS)
runner_base_name="$RUNNER_BASE_NAME"
runners_per_repo="$RUNNERS_PER_REPO"
pat="${RUNNER_CFG_PAT:-}"
token="${RUNNER_TOKEN:-}"
hostname="$RUNNER_HOSTNAME"

# Make sure the clock is set correctly (especially after restarting VM/sleep and etc.)
sudo sntp -sS time.apple.com

tmpdir=$(mktemp /tmp/"$(basename $0)".XXXXX)

wd=$(dirname "$0")

force_automation_without_authentication() {
    automationmodetool_expect="$HOME/automationmodetool.expect"
    cat >"$automationmodetool_expect" <<EOF
spawn automationmodetool enable-automationmode-without-authentication
expect "Enter the password for user 'admin':"
send "admin\\n"
expect "Setting up machine to allow Automation Mode without requiring user authentication... succeeded."
EOF
    expect -f "$automationmodetool_expect"
}

force_automation_without_authentication

ORCHARD_SHARED_HOST_DIR="/Volumes/My Shared Files"
ORCHARD_SHARED_RUNNER_SETUP="$ORCHARD_SHARED_HOST_DIR"/orchard-runner-setup
RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE=$(find "$ORCHARD_SHARED_RUNNER_SETUP" -name 'actions-runner-osx-arm64-*.tar.gz' || true)
ORCHARD_ADMIN_PRE_RUN_SCRIPT="$ORCHARD_SHARED_RUNNER_SETUP"/pre-run-admin.sh

if [ "${RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE:-}" != "" ] && [ -f "$RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE" ]; then
    rm -r actions-runner
    mkdir actions-runner
    tar xzf "$RUNNER_CUSTOM_ACTIONS_RUNNER_PACKAGE" -C actions-runner
fi

if [ -f "$ORCHARD_ADMIN_PRE_RUN_SCRIPT" ]; then
    "$ORCHARD_ADMIN_PRE_RUN_SCRIPT"
fi

# Make sure VNC viewer does not ask about the EULA.
mkdir -p ~/.vnc/config.d
echo 'EulaAccepted=59cfcff78382c5c8bc31a98fc50f6f4737383996' >~/.vnc/config.d/vncviewer
echo 'localhost::5900/extra=1e01' >~/.vnc/identities

# Make admin group passwordless.
sudo sh -c "echo '%admin ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/admin-group-nopassword"

# Install VNC viewer and x11vnc, required for enabling GUI session.
brew install vnc-viewer x11vnc
# Install sendkeys, required for sending keystrokes to GUI session.
brew install socsieng/tap/sendkeys

# Install ssh-pass.
brew install esolitos/ipa/sshpass

# Prepare for passwordless login.
ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""

mv actions-runner actions-runner.dist

for i in $(seq 1 "$runners_per_repo"); do
    for repo in "${repos[@]}"; do
        user_prefix=$(echo "$repo" | tr '/' '-')
        user="runner-$user_prefix-$i"
        runner_name="$runner_base_name-$i ($hostname)"
        log="spawn-$user.log"
        sleep 1 # Workaround sysadminctl race with user creation.
        env \
            RUNNER_CFG_PAT="${pat:-}" \
            RUNNER_TOKEN="${token:-}" \
            USER="$user" \
            REPO_URL="https://$gh_domain/$repo" \
            RUNNER_NAME="$runner_name" \
            RUNNER_LABELS="$labels${RUNNER_NON_ADMIN_LABELS:+,$RUNNER_NON_ADMIN_LABELS}" \
            "$wd"/spin-up-runner-in-orchard-vm \
            >"$log" 2>&1 &
    done
done

runner_name="$runner_base_name-0 ($hostname)"

if [ "${RUNNER_ADMIN_LABELS:-}" != "" ]; then
    for repo in "${repos[@]}"; do
        user_prefix=$(echo "$repo" | tr '/' '-')
        user="admin"
        runner_name="$runner_base_name-0 ($hostname)"
        log="spawn-admin-$user_prefix.log"
        env \
            RUNNER_CFG_PAT="${pat:-}" \
            RUNNER_TOKEN="${token:-}" \
            USER="$user" \
            REPO_URL="https://$gh_domain/$repo" \
            RUNNER_NAME="$runner_name" \
            RUNNER_LABELS="$labels${RUNNER_ADMIN_LABELS:+,$RUNNER_ADMIN_LABELS}" \
            RUNNER_HOME_PREFIX="$user_prefix" \
            "$wd"/spin-up-runner-in-orchard-vm \
            >"$log" 2>&1 &
    done
fi

wait
echo "${SPAWN_END_MARKER:-}"
