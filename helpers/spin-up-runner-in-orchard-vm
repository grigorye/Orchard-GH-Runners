#! /bin/bash

set -x
set -euo pipefail

repo_url="$REPO_URL"
user="$USER"
runner_name="$RUNNER_NAME"
pat="${RUNNER_CFG_PAT:-}"
token="${RUNNER_TOKEN:-}"
labels="$RUNNER_LABELS"

fullName="$user"
password="password"

wd=$(dirname "$0")

sudo sysadminctl \
    -addUser "$user" \
    -fullName "$fullName" \
    -password "$password"

runner_home="/Users/$user${RUNNER_HOME_PREFIX:+/$RUNNER_HOME_PREFIX}"
mkdir -p "$runner_home"

if [ "$user" != "admin" ]; then
    # Hide the user from the login window.
    sudo dscl . create "$runner_home" IsHidden 1

    # Allow ssh for the user.
    sudo dseditgroup -o edit -a "$user" -t user com.apple.access_ssh

    # Make the user an admin.
    sudo dseditgroup -o edit -a "$user" -t user admin

    "$wd"/enable-gui-session
    password="password"
else
    password="admin"
fi

sudo cp -pR actions-runner.dist "$runner_home"/actions-runner

sudo chown -R "$user" "$runner_home"/actions-runner

defaults -currentHost write com.apple.screensaver idleTime 0

sudo -u "$user" env HOME="$runner_home" git config --global credential.helper store
git_credentials=$(mktemp /tmp/.git-credentials.XXXXX)
echo "${RUNNER_GIT_CREDENTIALS:-}" >"$git_credentials"
sudo cp "$git_credentials" "$runner_home/.git-credentials"
sudo chown "$user" "$runner_home/.git-credentials"

sudo -u "$user" "$runner_home"/actions-runner/config.sh \
    --url "$repo_url" \
    ${pat:+--pat "$pat"} \
    ${token:+--token "$token"} \
    --name "$runner_name" \
    --labels "$labels" \
    --unattended \
    --replace

# Run the runner via ssh. Important, the following alternatives are known to be
# problematic:
# - `sudo -u "$user" xxx` does not result in proper gui session.
# - `sudo launchctl asuser $user sudo -u $user  sh -lc xxx` results in
#   xcodebuild failing without much diagnostics with exit status 70 soon after
#   start.
#
expect="$HOME/$user-run.expect"
cat >"$expect" <<EOF
spawn ssh -o "StrictHostKeyChecking=no" "$user@localhost" env PATH="$PATH" "$runner_home/actions-runner/run.sh"
expect "Password:"
send "$password\\n"
set timeout 60
expect "Listening for Jobs"
expect "Runner update in progress, do not shutdown runner."
expect "Listening for Jobs"
EOF

cat "$expect"

expect -f "$expect"
